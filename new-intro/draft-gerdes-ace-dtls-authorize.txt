



ACE Working Group                                              S. Gerdes
Internet-Draft                                               O. Bergmann
Intended status: Standards Track                              C. Bormann
Expires: March 20, 2017                          Universitaet Bremen TZI
                                                             G. Selander
                                                                Ericsson
                                                                L. Seitz
                                                     SICS Swedish ICT AB
                                                      September 16, 2016


Datagram Transport Layer Security (DTLS) Profile for Authentication and
            Authorization for Constrained Environments (ACE)
                 draft-gerdes-ace-dtls-authorize-latest

Abstract

   This specification defines a profile for delegating client
   authentication and authorization in a constrained environment for
   establishing a Datagram Transport Layer Security (DTLS) channel
   between resource-constrained nodes.  The protocol relies on DTLS to
   transfer authorization information and session keys between entities
   in a constrained network.  A resource-constrained node can use this
   protocol to delegate authentication of communication peers and
   management of authorization information to a trusted host with less
   severe limitations regarding processing power and memory.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 20, 2017.








Gerdes, et al.           Expires March 20, 2017                 [Page 1]

Internet-Draft                  CoAP-DTLS                 September 2016


Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Protocol  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.2.  Unauthorized Resource Request Message . . . . . . . . . .   4
     2.3.  AS Information  . . . . . . . . . . . . . . . . . . . . .   5
     2.4.  Client-to-AS Request  . . . . . . . . . . . . . . . . . .   7
     2.5.  AS-to-Client Response . . . . . . . . . . . . . . . . . .   8
     2.6.  DTLS Channel Setup Between C and RS . . . . . . . . . . .   9
     2.7.  Authorized Communication  . . . . . . . . . . . . . . . .   9
     2.8.  Dynamic Update of Authorization Information . . . . . . .  11
       2.8.1.  Handling of Ticket Transfer Messages  . . . . . . . .  12
   3.  DTLS PSK Generation Methods . . . . . . . . . . . . . . . . .  12
     3.1.  DTLS PSK Transfer . . . . . . . . . . . . . . . . . . . .  12
     3.2.  Distributed Key Derivation  . . . . . . . . . . . . . . .  13
   4.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  13
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  14
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .  14
     6.2.  Informative References  . . . . . . . . . . . . . . . . .  15
     6.3.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  16
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  16

1.  Introduction

   This specification defines a profile of the ACE framework
   [I-D.ietf-ace-oauth-authz].  In this profile, a client and a resource
   server use CoAP [RFC7252] over DTLS [RFC6347] to communicate.  The
   client uses an access token, bound to a key (the proof-of-possession
   key) to authorize its access to the resource server.  DTLS provides
   communication security, proof of possession, and server



Gerdes, et al.           Expires March 20, 2017                 [Page 2]

Internet-Draft                  CoAP-DTLS                 September 2016


   authentication.  Optionally the client and the resource server may
   also use CoAP over DTLS to communicate with the authorization server.
   The DTLS PSK handshake [RFC4279] provides the proof-of-possession for
   the key tied to the access token.  Furthermore the psk_identity
   parameter in the DTLS PSK handshake is used to transfer the access
   token from the client to the resource server.

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   Readers are expected to be familiar with the terms and concepts
   described in [I-D.ietf-ace-oauth-authz].

2.  Protocol

   The CoAP-DTLS profile for ACE comprises three parts:

   1.  transfer of authentication and, if necessary, authorization
       information between C and RS;

   2.  transfer of access requests and the respective ticket transfer
       between C and AS; and

   3.  transfer of ticket requests and the respective ticket grants
       between AS and C.

2.1.  Overview

   In Figure 1, a protocol flow for this profile is depicted (messages
   in square brackets are optional):


















Gerdes, et al.           Expires March 20, 2017                 [Page 3]

Internet-Draft                  CoAP-DTLS                 September 2016


      C                            RS                   AS
      | [-- Resource Request --->] |                     |
      |                            |                     |
      | [<----- AS Information --] |                     |
      |                            |                     |
      | --- Token Request  ----------------------------> |
      |                            |                     |
      | <---------------------------- Access Token ----- |
      |                             + Client Information |
      |                            |                     |
      | <== DTLS channel setup ==> |                     |
      |     + Access Token         |                     |
      |                            |                     |
      | == Authorized Request ===> |                     |
      |                            |                     |
      | <=== Protected Resource == |                     |


                        Figure 1: Protocol overview

   To determine the AS in charge of a resource hosted at the RS, C MAY
   send an initial Unauthorized Resource Request message to RS.  RS then
   denies the request and sends the address of its AS back to C.

   Instead of the initial Unauthorized Resource Request message, C MAY
   look up the desired resource in a resource directory (cf.
   [I-D.ietf-core-resource-directory]).

   Once C knows AS's address, it can send an access token request to the
   /token endpoint at the AS as specified in [I-D.ietf-ace-oauth-authz].
   If AS decides that the request is to be authorized it generates an
   access token response for C containing a "profile" parameter with the
   value "coap_dtls" to indicate that this profile MUST be used, and a
   "cnf" parameter with additional data for the establishment of a
   secure DTLS-channel between C and RS.

   The following sections specify how CoAP is used to interchange
   access-related data between RS and AS so that AS can provide C and RS
   with sufficient information to establish a secure channel, and
   simultaneously convey authorization information specific for this
   communication relationship to RS.

2.2.  Unauthorized Resource Request Message

   The optional Unauthorized Resource Request message is a request for a
   resource hosted by RS for which no proper authorization is granted.
   RS MUST treat any CoAP request as Unauthorized Resource Request
   message when any of the following holds:



Gerdes, et al.           Expires March 20, 2017                 [Page 4]

Internet-Draft                  CoAP-DTLS                 September 2016


   o  The request has been received on an unprotected channel.

   o  RS has no valid access token for the sender of the request
      regarding the requested action on that resource.

   o  RS has a valid access token for the sender of the request, but
      this does not allow the requested action on the requested
      resource.

   Note: These conditions ensure that RS can handle requests
   autonomously once access was granted and a secure channel has been
   established between C and RS.

   Unauthorized Resource Request messages MUST be denied with a client
   error response.  In this response, the Reource Server MUST provide
   proper AS Information to enable the Client to request an access token
   from RS's Authorization Server as described in Section 2.3.

   The response code MUST be 4.01 (Unauthorized) in case the sender of
   the Unauthorized Resource Request message is not authenticated, or if
   RS has no valid access token for C.  If RS has an access token for C
   but not for the resource that C has requested, RS MUST reject the
   request with a 4.03 (Forbidden).  If RS has an access token for C but
   it does not cover the action C requested on the resource, RS MUST
   reject the request with a 4.05 (Method Not Allowed).

   Note:  The use of the response codes 4.03 and 4.05 is intended to
      prevent infinite loops where a dumb Client optimistically tries to
      access a requested resource with any access token received from
      AS.  As malicious clients could pretend to be C to determine C's
      privileges, these detailed response codes must be used only when a
      certain level of security is already available which can be
      achieved only when the Client is authenticated.

2.3.  AS Information

   The AS Information is sent by RS as a response to an Unauthorized
   Resource Request message (see Section 2.2) to point the sender of the
   Unauthorized Resource Request message to RS's AS.  The AS information
   is a set of attributes containing an absolute URI (see Section 4.3 of
   [RFC3986]) that specifies the AS in charge of RS.

   An optional field "profile" indicates the preferred ACE profile for
   RS.

   TBD: We might not want to add more parameters in the AS information
   because
      this would not only reveal too much information about RS's



Gerdes, et al.           Expires March 20, 2017                 [Page 5]

Internet-Draft                  CoAP-DTLS                 September 2016


      capabilities to unauthorized peers but also be of little value as
      C

      cannot really trust that information anyway.

   The message MAY also contain a timestamp generated by RS.

   Figure 2 shows an example for an AS Information message payload using
   CBOR diagnostic notation.

       4.01 Unauthorized
       Content-Format: application/ace+cbor
       {AS: "coaps://as.example.com/token", TS: 168537,
        profile: coap_dtls}

                 Figure 2: AS Information payload example

   In this example, the attribute As points the receiver of this message
   to the URI "coaps://as.example.com/token" to request access
   permissions.  The originator of the AS Information payload (i.e., RS)
   uses a local clock that is loosely synchronized with a time scale
   common between RS and AS (e.g., wall clock time).  Therefore, it has
   included a time stamp on its own time scale that is used as a nonce
   for replay attack prevention.

   Note: There is an ongoing discussion how freshness of access tokens
      can be achieved in constrained environments.  This specification
      for

      now assumes that RS and AS have a common understanding of time
      that

      allows RS to achieve its security objectives.

   The examples in this document are written in CBOR diagnostic notation
   to improve readability.  Figure 3 illustrates the binary encoding of
   the message payload shown in Figure 2.














Gerdes, et al.           Expires March 20, 2017                 [Page 6]

Internet-Draft                  CoAP-DTLS                 September 2016


   a2                                   # map(2)
       00                               # unsigned(0) (=AS)
       78 1c                            # text(28)
          636f6170733a2f2f61732e657861
          6d706c652e636f6d2f746f6b656e # "coaps://as.example.com/token"
       05                               # unsigned(5) (=TS)
       1a 00029259                      # unsigned(168537)
       14                               # unsigned(20) (=profile)
       81                               # array(1)
          01                            # unsigned(1) (=coap_dtls)

             Figure 3: AS Information example encoded in CBOR

2.4.  Client-to-AS Request

   To retrieve an access token for the resource that C wants to access,
   C requests an Access Token from AS.  The Access Token request is
   constructed as specified in [I-D.ietf-ace-oauth-authz].  The
   parameter "profile" MUST be set to "coap_dtls".  If a symmetric
   proof-of-possession key (c.f.  [I-D.ietf-ace-oauth-authz]) is
   requested C must ensure that the Access Token request is sent over a
   secure channel that guarantees authentication, message integrity and
   confidentiality.  This could be, e.g., a DTLS channel (for "coaps")
   or an OSCOAP [I-D.selander-ace-object-security] exchange (for
   "coap").

   An example Access Token request from C to RS is depicted in Figure 4.

      POST coaps://as.example.com/token
      Content-Format: application/cbor
      {
        grant_type:    client_credentials,
        aud:           "tempSensor4711",
        client_id:     "myclient",
        client_secret: h'7365637265746b6579',
        token_type:    pop,
        alg:           HS256,
        profile:       coap_dtls
      }

                  Figure 4: Access Token request example

   The example shows an Access Token request for the resource identified
   by the audience string "tempSensor4711" on the AS and the client
   identifier "myclient".  The symmetric key used for a proof-of-
   possession token [I-D.ietf-oauth-pop-architecture] is "secretkey".

   TODO: Add example for encrypted shared secrets.



Gerdes, et al.           Expires March 20, 2017                 [Page 7]

Internet-Draft                  CoAP-DTLS                 September 2016


2.5.  AS-to-Client Response

   When AS has received an Access Token request it has to evaluate the
   access request information contained therein.  To grant access to the
   requested resource, AS constructs an Access Token as specified in
   [I-D.ietf-ace-oauth-authz].  For use with this profile, the attribute
   "profile" is set to "coap_dtls".

   Depending on the requested token type and algorithm in the Access
   Token request, AS adds the following Client Information to the
   response:

   A newly generated session key.  This specification describes a method
   for AS to derive a session key from a shared secret with RS, and
   attributes from the Access Token request such as the "aud" and
   "client_secret" parameters.  The generated key is transferred as
   parameter "k" in a "COSE_Key" object.  (See Section 7 of cose-msg
   [1].)

   AS SHOULD set Max-Age according to the Access Token lifetime in its
   response.

   Figure 5 shows an example AS response containing a new Access Token.
   The information is transferred as a CBOR data structure as specified
   in [I-D.ietf-ace-oauth-authz].  The Max-Age option tells the
   receiving Client how long this token will be valid.

      2.01 Created
      Content-Format: application/cbor
      Location-Path: /token/asdjbaskd
      Max-Age: 86400
      {
         access_token: b64'SlAV32hkKG ...
         (remainder of CWT omitted for brevity;
         token_type:   pop,
         alg:          HS256,
         expires_in:   86400,
         profile:      coap_dtls,
         cnf: {
           COSE_Key: {
             kty: symmetric,
             k: h'73657373696f6e6b6579'
           }
         }
      }

                  Figure 5: Example Access Token response




Gerdes, et al.           Expires March 20, 2017                 [Page 8]

Internet-Draft                  CoAP-DTLS                 September 2016


   A response that declines any operation on the requested resource is
   constructed according to Section 5.2 of RFC 6749 [2], (cf.
   Section 6.3 of [I-D.ietf-ace-oauth-authz]).

       4.00 Bad Request
       Content-Format: application/cbor
       {
         error: invalid_request
       }

            Figure 6: Example Access Token response with reject

2.6.  DTLS Channel Setup Between C and RS

   When C receives an Access Token from AS, it checks if the payload
   contains an "access_token" field and a "cnf" object.  With this
   information C can initiate establishment of a new DTLS channel with
   RS.  To use DTLS with pre-shared keys, C follows the PSK key exchange
   algorithm specified in Section 2 of [RFC4279], with the following
   additional requirements:

   1.  C sets the psk_identity field of the ClientKeyExchange message to
       the contents of the "access_token" field received from the AS.

   2.  C uses the key conveyed in the "cnf" field of the AS response as
       PSK when constructing the premaster secret.

   Note1: As RS cannot provide C with a meaningful PSK identity hint in

      response to C's ClientHello message, RS SHOULD NOT send a
      ServerKeyExchange message.

   Note2: According to <xref target="RFC7252"/>, CoAP implementations
   MUST
      support the ciphersuite TLS_PSK_WITH_AES_128_CCM_8 [RFC6655].  C
      is therefore expected to offer at least this ciphersuite to RS.

   Note3: The session key is constructed by AS such that RS can derive
   the
      PSK from the contents of the psk_identity contains in C's
      ClientHello message (refer to Section 3 for details).

2.7.  Authorized Communication

   Once a DTLS channel has been established as described in Section 2.6
   C is authorized to access resources covered by the Access Token it
   has presented in the "psk_identity".




Gerdes, et al.           Expires March 20, 2017                 [Page 9]

Internet-Draft                  CoAP-DTLS                 September 2016


   On the server side (i.e., RS), successful establishment of the DTLS
   channel between C and RS ties the authorization information contained
   in the "psk_identity" field to this channel.  Any request that RS
   receives on this channel is checked against these authorization
   rules.  Incoming CoAP requests that are not authorized with respect
   to this Access Token MUST be rejected by RS with 4.01 response as
   described in Section 2.2.

   RS SHOULD treat an incoming CoAP request as authorized if the
   following holds:

   1.  The message was received on a secure channel that has been
       established using the procedure defined in Section 2.6.

   2.  The authorization information tied to the secure channel is
       valid.

   3.  The request is destined for RS.

   4.  The resource URI specified in the request is covered by the
       authorization information.

   5.  The request method is an authorized action on the resource with
       respect to the authorization information.

   Note that the authorization information is not restricted to a single
   resource URI.  For example, role-based authorization can be used to
   authorize a collection of semantically connected resources
   simultaneously.  Implicit authorization also provides access rights
   to authenticated clients for all actions on all resources that RS
   offers.  As a result, C can use the same DTLS channel not only for
   subsequent requests for the same resource (e.g. for block-wise
   transfer as defined in [RFC7959] or refreshing observe-relationships
   [RFC7641]) but also for requests to distinct resources.

   Incoming CoAP requests received on a secure channel according to the
   procedure defined in Section 2.6 MUST be rejected

   1.  with response code 4.03 (Forbidden) when the resource URI
       specified in the request is not covered by the authorization
       information, and

   2.  with response code 4.05 (Method Not Allowed) when the resource
       URI specified in the request covered by the authorization
       information but not the requested action.

   C cannot always know a priori if a Authorized Resource Request will
   succeed.  If C repeatedly gets AS Information messages (cf.



Gerdes, et al.           Expires March 20, 2017                [Page 10]

Internet-Draft                  CoAP-DTLS                 September 2016


   Section 2.3) as response to its requests, it SHOULD request a new
   Access Token from AS to continue communication with RS.

2.8.  Dynamic Update of Authorization Information

   Once a security association exists between a Client and a Resource
   Server, the Client can update the authorization information stored at
   RS at any time.  To do so, the Client requests a new Access Token for
   the intended action on the respective resource and from AS as
   described in Section 2.4.

   Note:  Requesting a new Access Token also can be a Client's reaction
      on a 4.03 or 4.05 error that it has received in response to a
      request over a DTLS channel that was setup as specified in
      Section 2.6.

   Figure 7 depicts the message flow where C requests a new Access Token
   after a security association between C and RS has been established
   using this protocol.

      C                            RS                   AS
      | <== DTLS channel + AT ===> |                     |
      |                            |                     |
      | --- Resource Request ----> |                     |
      |                            |                     |
      | <-- 4.0x + AS Information  |                     |
      |                            |                     |
      | --- Token Request  ----------------------------> |
      |                            |                     |
      | <---------------------------- New Access Token - |
      |                             + Client Information |
      |                            |                     |
      | <== renegotiate session => |                     |
      |     + New Access Token     |                     |
      |                            |                     |
      | == Authorized Request ===> |                     |
      |                            |                     |
      | <=== Protected Resource == |                     |


              Figure 7: Overview of Dynamic Update Operation

   The major difference between dynamic update of authorization
   information and the initial handshake is that the DTLS session
   between C and RS may be renegotiated with the new Access Token as
   described in Section 2.8.1.





Gerdes, et al.           Expires March 20, 2017                [Page 11]

Internet-Draft                  CoAP-DTLS                 September 2016


2.8.1.  Handling of Ticket Transfer Messages

   If the security association with RS still exists and RS has indicated
   support for session renegotiation according to [RFC5746], the new
   Access Token SHOULD be used to renegotiate the existing DTLS session.
   In this case, the Access Token is used as "psk_identity" as defined
   in Section 2.6.  Otherwise, the Client MUST perform a new DTLS
   handshake according to Section 2.6 that replaces the existing DTLS
   session.

   After successful completion of the DTLS handshake RS updates the
   existing authorization information for C according to the new Access
   Token.

   Note:  No mutual authentication between C and RS is required for
      dynamic updates when a DTLS channel exists that has been
      established as defined in Section 2.6.  RS only needs to verify
      the authenticity and integrity of the Access Token issued by AS
      which is achieved by having performed a successful DTLS handshake
      with the Access Token as psk_identity.  This could even be done
      within the existing DTLS session while the previous Access Token
      is still valid.  To do so, a newly retrieved Access Token would be
      transmitted to the "/token" endpoint of RS.

3.  DTLS PSK Generation Methods

   One goal of this profile is to provide for a DTLS PSK shared between
   C and RS.  AS and RS MUST negotiate the method for the DTLS PSK
   generation.

3.1.  DTLS PSK Transfer

   The DTLS PSK is generated by AS and transmitted to C and RS using a
   secure channel.

   The DTLS PSK transfer method is defined as follows:

   o  AS generates the DTLS PSK using an algorithm of its choice

   o  AS MUST include a representation of the DTLS PSK in the Access
      Token and encrypt it together with all other information with a
      key K(AS,RS) it shares with RS.  How AS and RS exchange K(AS,RS)
      is not in the scope of this document.  AS and RS MAY use their
      preshared key as K(AS,RS).

   o  AS MUST include a representation of the DTLS PSK in "cnf" field of
      its response to C.




Gerdes, et al.           Expires March 20, 2017                [Page 12]

Internet-Draft                  CoAP-DTLS                 September 2016


   o  AS must ensure that the DTLS PSK is transferred to C using
      encrypted channels.

   o  RS MUST decrypt the session key using K(AS,RS)

3.2.  Distributed Key Derivation

   AS generates a DTLS PSK for C which is transmitted using a secure
   channel.  RS generates its own version of the DTLS PSK using the
   information provided in the "psk_identity" parameter of the
   ClientHello request.

   The distributed key derivation method is defined as follows:

   o  AS and RS both generate the DTLS PSK using the information
      included in the Access Token.  They use a key derivation algorithm
      on the Access Token with a shared key K(AS,RS).  The result serves
      as the DTLS PSK.  How AS and RS exchange K(AS,RS) is not in the
      scope of this document.  They MAY use their preshared key as
      K(AS,RS).  (TODO: Negotiation of the key derivation algorithm
      between AS and RS.)

   o  AS MUST include a representation of the DTLS PSK in the "cnf"
      field in its response to C which MUST be sent over a secure
      channel.

   o  AS MUST NOT include a representation of the DTLS PSK in the Access
      Token.

   o  (TBD) AS MUST NOT encrypt the Access Token.

4.  Examples

   TODO

5.  Security Considerations

   TODO

   Initially, no secure channel exists to protect the communication
   between C and RS.  Thus, C cannot determine if the AS information
   contained in an unprotected response from RS to an unauthorized
   request (c.f. {#as-info}) is authentic.  It is therefore advisable to
   provide C with a (possibly hard-coded) list of trustworthy
   authorization servers.  AS information responses referring to a URI
   not listed there would be ignored.





Gerdes, et al.           Expires March 20, 2017                [Page 13]

Internet-Draft                  CoAP-DTLS                 September 2016


6.  References

6.1.  Normative References

   [I-D.ietf-ace-oauth-authz]
              Seitz, L., Selander, G., Wahlstroem, E., Erdtman, S., and
              H. Tschofenig, "Authentication and Authorization for
              Constrained Environments (ACE)", draft-ietf-ace-oauth-
              authz-03 (work in progress), October 2016.

   [I-D.ietf-oauth-pop-architecture]
              Hunt, P., Richer, J., Mills, W., Mishra, P., and H.
              Tschofenig, "OAuth 2.0 Proof-of-Possession (PoP) Security
              Architecture", draft-ietf-oauth-pop-architecture-08 (work
              in progress), July 2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <http://www.rfc-editor.org/info/rfc3986>.

   [RFC4279]  Eronen, P., Ed. and H. Tschofenig, Ed., "Pre-Shared Key
              Ciphersuites for Transport Layer Security (TLS)",
              RFC 4279, DOI 10.17487/RFC4279, December 2005,
              <http://www.rfc-editor.org/info/rfc4279>.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", BCP 26, RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <http://www.rfc-editor.org/info/rfc5226>.

   [RFC5746]  Rescorla, E., Ray, M., Dispensa, S., and N. Oskov,
              "Transport Layer Security (TLS) Renegotiation Indication
              Extension", RFC 5746, DOI 10.17487/RFC5746, February 2010,
              <http://www.rfc-editor.org/info/rfc5746>.

   [RFC6347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security Version 1.2", RFC 6347, DOI 10.17487/RFC6347,
              January 2012, <http://www.rfc-editor.org/info/rfc6347>.







Gerdes, et al.           Expires March 20, 2017                [Page 14]

Internet-Draft                  CoAP-DTLS                 September 2016


   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <http://www.rfc-editor.org/info/rfc6838>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <http://www.rfc-editor.org/info/rfc7049>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <http://www.rfc-editor.org/info/rfc7252>.

6.2.  Informative References

   [I-D.ietf-core-resource-directory]
              Shelby, Z., Koster, M., Bormann, C., and P. Stok, "CoRE
              Resource Directory", draft-ietf-core-resource-directory-08
              (work in progress), July 2016.

   [I-D.selander-ace-object-security]
              Selander, G., Mattsson, J., Palombini, F., and L. Seitz,
              "Object Security of CoAP (OSCOAP)", draft-selander-ace-
              object-security-06 (work in progress), October 2016.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <http://www.rfc-editor.org/info/rfc5988>.

   [RFC6655]  McGrew, D. and D. Bailey, "AES-CCM Cipher Suites for
              Transport Layer Security (TLS)", RFC 6655,
              DOI 10.17487/RFC6655, July 2012,
              <http://www.rfc-editor.org/info/rfc6655>.

   [RFC6690]  Shelby, Z., "Constrained RESTful Environments (CoRE) Link
              Format", RFC 6690, DOI 10.17487/RFC6690, August 2012,
              <http://www.rfc-editor.org/info/rfc6690>.

   [RFC7641]  Hartke, K., "Observing Resources in the Constrained
              Application Protocol (CoAP)", RFC 7641,
              DOI 10.17487/RFC7641, September 2015,
              <http://www.rfc-editor.org/info/rfc7641>.

   [RFC7959]  Bormann, C. and Z. Shelby, Ed., "Block-Wise Transfers in
              the Constrained Application Protocol (CoAP)", RFC 7959,
              DOI 10.17487/RFC7959, August 2016,
              <http://www.rfc-editor.org/info/rfc7959>.



Gerdes, et al.           Expires March 20, 2017                [Page 15]

Internet-Draft                  CoAP-DTLS                 September 2016


6.3.  URIs

   [1] https://tools.ietf.org/html/draft-ietf-cose-msg-18#section-7

   [2] https://tools.ietf.org/html/rfc6749#section-5.2

Authors' Addresses

   Stefanie Gerdes
   Universitaet Bremen TZI
   Postfach 330440
   Bremen  D-28359
   Germany

   Phone: +49-421-218-63906
   Email: gerdes@tzi.org


   Olaf Bergmann
   Universitaet Bremen TZI
   Postfach 330440
   Bremen  D-28359
   Germany

   Phone: +49-421-218-63904
   Email: bergmann@tzi.org


   Carsten Bormann
   Universitaet Bremen TZI
   Postfach 330440
   Bremen  D-28359
   Germany

   Phone: +49-421-218-63921
   Email: cabo@tzi.org


   Goeran Selander
   Ericsson
   Faroegatan 6
   Kista  164 80
   Sweden

   Email: goran.selander@ericsson.com






Gerdes, et al.           Expires March 20, 2017                [Page 16]

Internet-Draft                  CoAP-DTLS                 September 2016


   Ludwig Seitz
   SICS Swedish ICT AB
   Scheelevaegen 17
   Lund  223 70
   Sweden

   Email: ludwig@sics.se












































Gerdes, et al.           Expires March 20, 2017                [Page 17]
